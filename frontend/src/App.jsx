import React, { useState } from 'react';
import './App.css';
import { ConnectButton, useCurrentAccount, useSignAndExecuteTransactionBlock } from '@mysten/dapp-kit';
import { TransactionBlock } from '@mysten/sui.js/transactions';
import { Buffer } from 'buffer';

const INITIAL_CODE_STATE = '// Your generated Move code will appear here...';

function App() {
  const account = useCurrentAccount();
  const { mutate: signAndExecuteTransactionBlock } = useSignAndExecuteTransactionBlock();

  const [formData, setFormData] = useState({
    nftName: 'MyAwesomeNFT',
    moduleName: 'my_awesome_nft',
    projectName: 'my_project',
    description: 'This is a beautiful NFT generated by MovePie!',
    isMintable: true,
  });
  const [nftImage, setNftImage] = useState(null);
  const [generatedCode, setGeneratedCode] = useState(INITIAL_CODE_STATE);
  const [isLoading, setIsLoading] = useState(false);
  const [isDeploying, setIsDeploying] = useState(false);
  const [deployResult, setDeployResult] = useState(null);
  const [deployError, setDeployError] = useState(null);

  const handleInputChange = (event) => {
    const { name, value, type, checked } = event.target;
    setFormData(prevData => ({
      ...prevData,
      [name]: type === 'checkbox' ? checked : value
    }));
  };

  const handleImageChange = (event) => {
    setNftImage(event.target.files[0]);
  };

  const handleSubmit = async (event) => {
    event.preventDefault();
    setIsLoading(true);
    setDeployResult(null);
    setDeployError(null);
    setGeneratedCode('// Generating code, please wait...');
    try {
      const dataToSend = new FormData();
      for (const key in formData) { dataToSend.append(key, formData[key]); }
      if (nftImage) { dataToSend.append('nftImage', nftImage); }
      
      const response = await fetch('http://localhost:3001/api/generate', { method: 'POST', body: dataToSend });
      
      if (!response.ok) { throw new Error(`HTTP error! status: ${response.status}`); }
      
      const data = await response.json();
      setGeneratedCode(data.generatedCode);
    } catch (error) {
      console.error('Error generating code:', error);
      setGeneratedCode(`// Error generating code. Please check the console.\n// ${error.message}`);
    } finally {
      setIsLoading(false);
    }
  };
  
  const handleDeploy = async () => {
    if (!account || generatedCode === INITIAL_CODE_STATE) {
      alert("Please connect your wallet and generate the code first.");
      return;
    }
    setIsDeploying(true);
    setDeployResult(null);
    setDeployError(null);
    try {
      const compileResponse = await fetch('http://localhost:3001/api/compile', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ moveCode: generatedCode, projectName: formData.projectName }),
      });
      if (!compileResponse.ok) {
        const errorData = await compileResponse.json();
        throw new Error(`Compilation failed: ${errorData.details || 'Unknown error'}`);
      }
      const { modules, dependencies } = await compileResponse.json();
      const txb = new TransactionBlock();
      const [upgradeCap] = txb.publish({
        modules: modules.map(m => Array.from(Buffer.from(m, 'base64'))),
        dependencies: dependencies,
      });
      txb.transferObjects([upgradeCap], txb.pure(account.address));
      
      signAndExecuteTransactionBlock({
        transactionBlock: txb,
        options: { showEffects: true },
      }, {
        onSuccess: (result) => { setDeployResult(result); },
        onError: (error) => { setDeployError(error.message || "An unknown error occurred."); },
        onSettled: () => { setIsDeploying(false); }
      });
    } catch (error) {
      setDeployError(error.message);
      setIsDeploying(false);
    }
  };

  return (
    <div className="app">
      <header className="app-header">
        <h1>MovePie v0.1: Form Generator ü•ß</h1>
        <div className="connect-button-container"><ConnectButton /></div>
      </header>
      
      <div className="wallet-status">
        {account ? (
          <div><p>‚úÖ Wallet Connected!</p><p>Your Address: {account.address}</p></div>
        ) : (
          <p>‚õîÔ∏è Please connect your wallet to continue.</p>
        )}
      </div>

      <main className="container">
        <form className="form-panel" onSubmit={handleSubmit}>
          <h2>Configuration</h2>
          <label htmlFor="nftName">NFT Struct Name (PascalCase):</label>
          <input type="text" id="nftName" name="nftName" value={formData.nftName} onChange={handleInputChange} required />
          <label htmlFor="moduleName">Module Name (snake_case):</label>
          <input type="text" id="moduleName" name="moduleName" value={formData.moduleName} onChange={handleInputChange} required />
          <label htmlFor="projectName">Project Name (in Move.toml):</label>
          <input type="text" id="projectName" name="projectName" value={formData.projectName} onChange={handleInputChange} required />
          <label htmlFor="description">NFT Description:</label>
          <textarea id="description" name="description" value={formData.description} onChange={handleInputChange} rows="3"></textarea>
          <label htmlFor="nftImage">Upload NFT Image:</label>
          <input type="file" id="nftImage" name="nftImage" accept="image/*" onChange={handleImageChange} />
          <div className="checkbox-group">
            <input type="checkbox" id="isMintable" name="isMintable" checked={formData.isMintable} onChange={handleInputChange} />
            <label htmlFor="isMintable">Make it Mintable?</label>
          </div>
          <button type="submit" disabled={isLoading}>{isLoading ? 'Generating...' : 'Generate Code'}</button>
        </form>

        <div className="code-panel">
          <div className="code-panel-header">
            <h2>Generated Code</h2>
            <button 
              className="deploy-button" 
              onClick={handleDeploy} 
              disabled={!account || isDeploying || isLoading || generatedCode === INITIAL_CODE_STATE}
            >
              {isDeploying ? 'Deploying...' : 'üöÄ Deploy Now'}
            </button>
          </div>
          <pre><code>{generatedCode}</code></pre>
          <div className="deploy-status">
            {deployResult && (
              <div className="success">
                <strong>Deployment Successful!</strong>
                <p>Digest: <a href={`https://suiscan.xyz/testnet/tx/${deployResult.digest}`} target="_blank" rel="noopener noreferrer">{deployResult.digest}</a></p>
              </div>
            )}
            {deployError && (
              <div className="error">
                <strong>Deployment Failed:</strong>
                <p>{deployError}</p>
              </div>
            )}
          </div>
        </div>
      </main>
    </div>
  );
}

export default App;